import { ensureMigrationsStart } from './migrations';
import { registerMiscRouter } from './miscHandlers';
import { registerDbMessageRouter } from './dbRouter';
import { registerWebDAVRouter } from './webdav';
import { installConsoleProxyWithSettings } from './consoleConfig';
import { installDrive115V2Proxy } from './drive115Proxy';
sendResponse({ success: true, data, status: response.status, headers: headersObj });
    } catch (error: any) {
        console.error('[Background] Failed to fetch external data:', error);
        sendResponse({ success: false, error: error.message });
    }
}

// 鎷夊彇鐢ㄦ埛璧勬枡锛堝崰浣嶅疄鐜帮級
async function fetchUserProfileFromJavDB(): Promise<any> {
    try {
        const profile = await getValue(STORAGE_KEYS.USER_PROFILE, null);
        return profile || { isLoggedIn: false };
    } catch {
        return { isLoggedIn: false };
    }
}

// 闂归挓涓庤嚜鍔ㄥ悓姝ワ紙鍗犱綅瀹炵幇锛?
async function setupAlarms(): Promise<void> {
    try { /* no-op */ } catch {}
}
async function triggerAutoSync(): Promise<void> {
    try { /* no-op */ } catch {}
}

async function handleOpenTabBackground(message: any, sendResponse: (response: any) => void): Promise<void> {
    try {
        const { url } = message;
        if (!url) {
            sendResponse({ success: false, error: 'No URL provided' });
            return;
        }

        // 鍦ㄥ悗鍙版墦寮€鏂版爣绛鹃〉
        const tab = await chrome.tabs.create({
            url: url,
            active: false // 鍚庡彴鎵撳紑
        });

        console.log(`[Background] Opened background tab: ${url}`);
        sendResponse({ success: true, tabId: tab.id });
    } catch (error: any) {
        console.error('[Background] Failed to open background tab:', error);
        sendResponse({ success: false, error: error.message });
    }
}

// 妫€鏌ヨ棰慤RL鏄惁鍙敤
async function handleCheckVideoUrl(message: any, sendResponse: (response: any) => void): Promise<void> {
    try {
        const { url } = message;
        if (!url) {
            sendResponse({ success: false, error: 'No URL provided' });
            return;
        }

        console.log(`[Background] Checking video URL: ${url}`);

        // 灏濊瘯澶氱鏂规硶楠岃瘉URL
        let available = false;

        // 鏂规硶1: 灏濊瘯鍙鐨?HEAD 璇锋眰锛堜笉浣跨敤 no-cors锛屼究浜庤鍙栫姸鎬佺爜锛?
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5绉掕秴鏃?

            const response = await fetch(url, {
                method: 'HEAD',
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            available = response.ok; // 蹇呴』涓哄彲璇讳笖 OK
            console.log(`[Background] HEAD check for ${url}: available=${available}, status=${response.status}`);

            if (available) {
                sendResponse({ success: true, available: true });
                return;
            }
        } catch (headError: any) {
            console.log(`[Background] HEAD request failed for ${url}:`, headError?.message);
        }

        // 鏂规硶2: 灏濊瘯甯?Range 鐨?GET锛堣鍙栫姸鎬佺爜锛屽厑璁?200/206锛?
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Range': 'bytes=0-1023'
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            available = response.ok || response.status === 206;
            console.log(`[Background] Range GET check for ${url}: available=${available}, status=${response.status}`);

            if (available) {
                sendResponse({ success: true, available: true });
                return;
            }
        } catch (rangeError: any) {
            console.log(`[Background] Range GET failed for ${url}:`, rangeError?.message);
        }

        // 鏂规硶3: 瀵逛簬瑙嗛鏂囦欢锛屽皾璇曞垱寤簐ideo鍏冪礌娴嬭瘯
        if (url.includes('.mp4') || url.includes('.webm') || url.includes('.avi')) {
            try {
                // 杩欎釜鏂规硶鍦╞ackground script涓笉鍙敤锛岃烦杩?
                console.log(`[Background] Video URL detected, but cannot test in background: ${url}`);
            } catch (videoError: any) {
                console.log(`[Background] Video test failed for ${url}:`, videoError?.message);
            }
        }

        // 鏂规硶4: 鍩轰簬鍩熷悕鐨勫惎鍙戝紡鍒ゆ柇
        const knownBadDomains = [
            'smovie.caribbeancom.com',
            'smovie.1pondo.tv',
            'smovie.10musume.com',
            'fms.pacopacomama.com'
        ];

        const isKnownBad = knownBadDomains.some(domain => url.includes(domain));

        if (isKnownBad) {
            console.log(`[Background] Known problematic domain for ${url}, marking unavailable`);
            available = false;
        } else {
            console.log(`[Background] Unknown or not explicitly allowed domain for ${url}, defaulting to unavailable`);
            available = false; // 淇濆畧澶勭悊锛岄伩鍏嶈鍒?
        }

        sendResponse({ success: true, available });
    } catch (error: any) {
        console.error(`[Background] Failed to check video URL ${message.url}:`, error);
        sendResponse({ success: false, available: false });
    }
}

// 浠嶫avSpyl鑾峰彇棰勮瑙嗛
async function handleFetchJavSpylPreview(message: any, sendResponse: (response: any) => void): Promise<void> {
    try {
        const { code } = message;
        if (!code) {
            sendResponse({ success: false, error: 'No code provided' });
            return;
        }

        console.log(`[Background] Fetching JavSpyl preview for: ${code}`);

        const response = await fetch('https://v2.javspyl.tk/api/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Origin': 'https://javspyl.tk',
                'Referer': 'https://javspyl.tk/',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            body: JSON.stringify({ ID: code })
        });

        console.log(`[Background] JavSpyl API response status: ${response.status}`);

        if (!response.ok) {
            console.log(`[Background] JavSpyl API request failed: ${response.status} ${response.statusText}`);
            sendResponse({ success: false, error: `API request failed: ${response.status}` });
            return;
        }

        const data = await response.json();
        console.log(`[Background] JavSpyl API response data:`, data);

        const videoUrl = data?.info?.url;

        if (!videoUrl) {
            console.log(`[Background] No video URL found in JavSpyl response for ${code}`);
            sendResponse({ success: false, error: 'No video URL found in response' });
            return;
        }

        if (/\.m3u8?$/i.test(videoUrl)) {
            console.log(`[Background] JavSpyl returned m3u8 URL, skipping: ${videoUrl}`);
            sendResponse({ success: false, error: 'M3U8 format not supported' });
            return;
        }

        const finalUrl = videoUrl.includes('//') ? videoUrl : `https://${videoUrl}`;
        console.log(`[Background] JavSpyl final video URL: ${finalUrl}`);

        // 绠€鍖栭獙璇?- 鐩存帴杩斿洖URL锛岃鍓嶇澶勭悊
        sendResponse({ success: true, videoUrl: finalUrl });
    } catch (error: any) {
        console.error(`[Background] Failed to fetch JavSpyl preview for ${message.code}:`, error);
        sendResponse({ success: false, error: error.message });
    }
}

// 浠嶢VPreview鑾峰彇棰勮瑙嗛
async function handleFetchAVPreviewPreview(message: any, sendResponse: (response: any) => void): Promise<void> {
    try {
        const { code } = message;
        if (!code) {
            sendResponse({ success: false, error: 'No code provided' });
            return;
        }

        // 绗竴姝ワ細鎼滅储瑙嗛
        const searchResponse = await fetch(`https://avpreview.com/zh/search?keywords=${code}`);
        if (!searchResponse.ok) {
            sendResponse({ success: false, error: 'Search request failed' });
            return;
        }

        const searchHtml = await searchResponse.text();
        const parser = new DOMParser();
        const searchDoc = parser.parseFromString(searchHtml, 'text/html');

        // 鏌ユ壘鍖归厤鐨勮棰?
        const videoBoxes = Array.from(searchDoc.querySelectorAll('.container .videobox'));
        const matchedBox = videoBoxes.find(item => {
            const titleElement = item.querySelector('h2 strong');
            return titleElement && titleElement.textContent === code;
        });

        if (!matchedBox) {
            sendResponse({ success: false, error: 'Video not found in search results' });
            return;
        }

        const detailLink = matchedBox.querySelector('a')?.getAttribute('href');
        if (!detailLink) {
            sendResponse({ success: false, error: 'No detail link found' });
            return;
        }

        const contentId = detailLink.split('/').pop();
        if (!contentId) {
            sendResponse({ success: false, error: 'No content ID found' });
            return;
        }

        // 绗簩姝ワ細鑾峰彇瑙嗛璇︽儏
        const apiUrl = new URL('https://avpreview.com/API/v1.0/index.php');
        apiUrl.searchParams.set('system', 'videos');
        apiUrl.searchParams.set('action', 'detail');
        apiUrl.searchParams.set('contentid', contentId);
        apiUrl.searchParams.set('sitecode', 'avpreview');
        apiUrl.searchParams.set('ip', '');
        apiUrl.searchParams.set('token', '');

        const apiResponse = await fetch(apiUrl.toString());
        if (!apiResponse.ok) {
            sendResponse({ success: false, error: 'API detail request failed' });
            return;
        }

        const apiData = await apiResponse.json();
        let trailerUrl = apiData?.videos?.trailer;

        if (!trailerUrl) {
            sendResponse({ success: false, error: 'No trailer URL found' });
            return;
        }

        // 杞崲URL鏍煎紡
        trailerUrl = trailerUrl.replace('/hlsvideo/', '/litevideo/').replace('/playlist.m3u8', '');
        const finalContentId = trailerUrl.split('/').pop();

        // 灏濊瘯涓嶅悓鐨勮棰戞牸寮?
        const videoUrls = [
            `${trailerUrl}/${finalContentId}_dmb_w.mp4`,
            `${trailerUrl}/${finalContentId}_mhb_w.mp4`,
            `${trailerUrl}/${finalContentId}_dm_w.mp4`,
            `${trailerUrl}/${finalContentId}_sm_w.mp4`,
        ];

        // 妫€鏌ュ摢涓猆RL鍙敤
        for (const url of videoUrls) {
            try {
                const checkResponse = await fetch(url, { method: 'HEAD', mode: 'no-cors' });
                const available = checkResponse.ok || checkResponse.type === 'opaque';
                if (available) {
                    sendResponse({ success: true, videoUrl: url });
                    return;
                }
            } catch (err) {
                // ignore and try next
            }
        }

        // 鎵€鏈夊皾璇曢兘澶辫触浜?
        sendResponse({ success: false, error: 'No accessible video URL found' });
        return;
    } catch (error: any) {
        console.error(`[Background] Failed to fetch AVPreview preview for ${message.code}:`, error);
        sendResponse({ success: false, error: error.message });
    }
}

chrome.runtime.onStartup.addListener(async () => {
    setupAlarms();
    triggerAutoSync();

    // 鍒濆鍖栨柊浣滃搧璋冨害鍣?
    try {
        await newWorksScheduler.initialize();
    } catch (error: any) {
        logger.error('鍒濆鍖栨柊浣滃搧璋冨害鍣ㄥけ璐?', error);
    }
});



installDrive115V2Proxy();
installConsoleProxyWithSettings();
ensureMigrationsStart();
registerWebDAVRouter();
registerDbMessageRouter();
registerMiscRouter();
