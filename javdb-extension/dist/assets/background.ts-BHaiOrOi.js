import{s as f,S as l,a as b,g as u,b as D}from"./storage-Pif_YOsy.js";const v=200,R={INFO:console.info,WARN:console.warn,ERROR:console.error,DEBUG:console.debug};async function w(e,t,s){(R[e]||console.log)(`[${e}] ${t}`,s);try{const n=await b(l.LOGS,[]),o={timestamp:new Date().toISOString(),level:e,message:t,data:s?JSON.parse(JSON.stringify(s)):null};n.push(o),n.length>v&&n.splice(0,n.length-v),await f(l.LOGS,n)}catch(n){console.error("Failed to write to persistent log:",n)}}const a={info:(e,t)=>w("INFO",e,t),warn:(e,t)=>w("WARN",e,t),error:(e,t)=>w("ERROR",e,t),debug:(e,t)=>w("DEBUG",e,t)};async function A(){await a.info("Attempting to perform WebDAV upload.");const e=await u();if(!e.webdav.enabled||!e.webdav.url){const t="WebDAV is not enabled or URL is not configured.";return await a.warn(t),{success:!1,error:t}}try{const t=await b(l.VIEWED_RECORDS,{}),s={settings:e,data:t},n=`/javdb-extension-backup-${new Date().toISOString().split("T")[0]}.json`;let o=e.webdav.url;o.endsWith("/")||(o+="/"),o+=n.startsWith("/")?n.substring(1):n,await a.info(`Uploading to ${o}`);const d=await fetch(o,{method:"PUT",headers:{Authorization:"Basic "+btoa(`${e.webdav.username}:${e.webdav.password}`),"Content-Type":"application/json"},body:JSON.stringify(s,null,2)});if(!d.ok)throw new Error(`Upload failed with status: ${d.status}`);return await a.info("WebDAV upload successful."),{success:!0}}catch(t){return await a.error("WebDAV upload failed.",{error:t.message}),{success:!1,error:t.message}}}async function V(e,t={restoreSettings:!0,restoreRecords:!0}){await a.info("Attempting to restore from WebDAV.",{filename:e,options:t});const s=await u();if(!s.webdav.enabled||!s.webdav.url){const r="WebDAV is not enabled or URL is not configured.";return await a.warn(r),{success:!1,error:r}}try{let r;const n=s.webdav.url;if(e.startsWith("http://")||e.startsWith("https://"))r=e;else if(e.startsWith("/")){const i=new URL(n).origin;r=new URL(e,i).href}else{let i=n;i.endsWith("/")||(i+="/"),r=new URL(e,i).href}await a.info(`Attempting to restore from WebDAV URL: ${r}`);const o=await fetch(r,{method:"GET",headers:{Authorization:"Basic "+btoa(`${s.webdav.username}:${s.webdav.password}`)}});if(!o.ok)throw new Error(`Download failed with status: ${o.status}`);const d=await o.text(),c=JSON.parse(d);return c.settings&&t.restoreSettings&&await D(c.settings),c.data&&t.restoreRecords?await f(l.VIEWED_RECORDS,c.data):t.restoreRecords&&await f(l.VIEWED_RECORDS,c),await a.info("Successfully restored from WebDAV.",{filename:e}),{success:!0}}catch(r){return await a.error("Failed to restore from WebDAV.",{error:r.message,filename:e}),{success:!1,error:r.message}}}async function E(){await a.info("Attempting to list files from WebDAV.");const e=await u();if(!e.webdav.enabled||!e.webdav.url){const t="WebDAV is not enabled or URL is not configured.";return await a.warn(t),{success:!1,error:t}}try{let t=e.webdav.url;t.endsWith("/")||(t+="/");const s=await fetch(t,{method:"PROPFIND",headers:{Authorization:"Basic "+btoa(`${e.webdav.username}:${e.webdav.password}`),Depth:"1"}});if(!s.ok)throw new Error(`Failed to list files with status: ${s.status}`);const r=await s.text();await a.debug("Received WebDAV PROPFIND response:",{response:r});const n=O(r);return await a.debug("Parsed WebDAV files:",{files:n}),await a.info(`Successfully listed ${n.length} backup files from WebDAV.`),{success:!0,files:n}}catch(t){return await a.error("Failed to list WebDAV files.",{error:t.message}),{success:!1,error:t.message}}}function O(e){const t=[],s=e.replace(/<(\/)?\w+:/g,"<$1"),r=/<response>(.*?)<\/response>/gs,n=/<href>(.*?)<\/href>/,o=/<getlastmodified>(.*?)<\/getlastmodified>/,d=/<resourcetype>\s*<collection\s*\/>\s*<\/resourcetype>/;let c;for(;(c=r.exec(s))!==null;){const i=c[1],p=i.match(n);if(p){const g=p[1],m=decodeURIComponent(g.split("/").filter(Boolean).pop()||"");if(d.test(i)||g.endsWith("/"))continue;if(m.includes("javdb-extension-backup")){const y=i.match(o),W=y?new Date(y[1]).toLocaleString():"N/A";t.push({name:m,path:g,lastModified:W,isDirectory:!1})}}}return t}async function $(){await a.info("Testing WebDAV connection.");const e=await u();if(!e.webdav.url||!e.webdav.username||!e.webdav.password){const t="WebDAV connection details are not fully configured.";return await a.warn(t),{success:!1,error:t}}try{const t=await fetch(e.webdav.url,{method:"PROPFIND",headers:{Authorization:"Basic "+btoa(`${e.webdav.username}:${e.webdav.password}`),Depth:"0"}});if(t.ok)return await a.info("WebDAV connection test successful."),{success:!0};{const s=`Connection test failed with status: ${t.status}`;return await a.warn(s),{success:!1,error:s}}}catch(t){return await a.error("WebDAV connection test failed.",{error:t.message}),{success:!1,error:t.message}}}chrome.runtime.onMessage.addListener((e,t,s)=>{switch(e.type){case"webdav-upload":return A().then(s),!0;case"webdav-restore":return V(e.filename,e.options).then(s),!0;case"webdav-list-files":return E().then(s),!0;case"webdav-test":return $().then(s),!0;case"setup-alarms":return h(),!1;case"get-logs":return b(l.LOGS,[]).then(r=>s({success:!0,logs:r})),!0;case"clear-logs":return f(l.LOGS,[]).then(()=>s({success:!0})),!0;default:return!1}});async function S(){await a.info("Checking if auto-sync should be triggered.");const e=await u();if(e.webdav.enabled&&e.webdav.autoSync){await a.info("Performing daily auto-sync...");const t=await A();if(t&&t.success){await a.info("Daily auto-sync successful.");const s=await u();s.webdav.lastSync=new Date().toISOString(),await D(s)}else await a.error("Daily auto-sync failed.",{error:t?t.error:"No response."})}else await a.info("Auto-sync is disabled, skipping.")}async function h(){await a.info("Setting up alarms for auto-sync.");const e=await u(),t=e.webdav.syncInterval||1440,s=await chrome.alarms.get("daily-webdav-sync");s&&s.periodInMinutes!==t&&(await chrome.alarms.clear("daily-webdav-sync"),a.info("Cleared existing alarm due to interval change.")),e.webdav.enabled&&e.webdav.autoSync?(chrome.alarms.create("daily-webdav-sync",{delayInMinutes:1,periodInMinutes:t}),await a.info(`Created/updated auto-sync alarm with interval: ${t} minutes.`)):await chrome.alarms.clear("daily-webdav-sync")&&a.info("Auto-sync is disabled, clearing any existing alarms.")}chrome.runtime.onStartup.addListener(()=>{h(),S()});chrome.runtime.onInstalled.addListener(()=>{h()});chrome.alarms.onAlarm.addListener(async e=>{e.name==="daily-webdav-sync"&&(await a.info(`Alarm '${e.name}' triggered, starting auto-sync.`),await S())});
